-- Create the new unified notes table
CREATE TABLE notes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    vacancy_id BIGINT NULL,
    interview_id BIGINT NULL,
    user_id BIGINT NOT NULL,
    content TEXT NOT NULL,
    type VARCHAR(50) NOT NULL CHECK (
        type IN (
            'GENERAL', 'OFFER_RECEIVED', 'REJECTION_RECEIVED', 
            'INTERVIEW_FEEDBACK', 'FOLLOW_UP', 'RESEARCH', 
            'SALARY_NEGOTIATION', 'CONTACT_INFO', 
            'COMPANY_CULTURE', 'NEXT_STEPS'
        )
    ),
    priority VARCHAR(20) NOT NULL DEFAULT 'MEDIUM' CHECK (
        priority IN ('LOW', 'MEDIUM', 'HIGH', 'URGENT')
    ),
    tags TEXT NULL,
    is_private BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    -- Ensure exactly one of vacancy_id or interview_id is set
    CONSTRAINT chk_note_reference CHECK (
        (vacancy_id IS NOT NULL AND interview_id IS NULL) OR 
        (vacancy_id IS NULL AND interview_id IS NOT NULL)
    ),
    
    -- Foreign key constraints
    CONSTRAINT fk_notes_vacancy FOREIGN KEY (vacancy_id) REFERENCES vacancies(id) ON DELETE CASCADE,
    CONSTRAINT fk_notes_interview FOREIGN KEY (interview_id) REFERENCES interviews(id) ON DELETE CASCADE,
    CONSTRAINT fk_notes_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create indexes for better query performance
CREATE INDEX idx_notes_vacancy_id ON notes(vacancy_id);
CREATE INDEX idx_notes_interview_id ON notes(interview_id);
CREATE INDEX idx_notes_user_id ON notes(user_id);
CREATE INDEX idx_notes_type ON notes(type);
CREATE INDEX idx_notes_priority ON notes(priority);
CREATE INDEX idx_notes_created_at ON notes(created_at);

-- Create an index for searching notes by vacancy and user
CREATE INDEX idx_notes_vacancy_user ON notes(vacancy_id, user_id);
-- Create an index for searching notes by interview and user
CREATE INDEX idx_notes_interview_user ON notes(interview_id, user_id);

-- Migrate existing vacancy_notes data to the new notes table (if the table exists)
INSERT INTO notes (vacancy_id, user_id, content, type, priority, tags, is_private, created_at, updated_at)
SELECT vacancy_id, user_id, content, type, priority, tags, is_private, created_at, updated_at
FROM vacancy_notes
WHERE EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'vacancy_notes');